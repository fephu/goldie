// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  name,
  value
) VALUES (
  $1, $2
)
RETURNING value, name
`

type CreateCategoryParams struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Value)
	var i Category
	err := row.Scan(&i.Value, &i.Name)
	return i, err
}

const getCategory = `-- name: GetCategory :one
SELECT value, name FROM categories
WHERE value = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, value string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, value)
	var i Category
	err := row.Scan(&i.Value, &i.Name)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT value, name FROM categories
ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.Value, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
