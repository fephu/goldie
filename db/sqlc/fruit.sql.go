// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fruit.sql

package db

import (
	"context"
)

const createFruit = `-- name: CreateFruit :one
INSERT INTO fruits (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateFruit(ctx context.Context, name string) (Fruit, error) {
	row := q.db.QueryRow(ctx, createFruit, name)
	var i Fruit
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteFruit = `-- name: DeleteFruit :exec
DELETE FROM fruits
WHERE id = $1
`

func (q *Queries) DeleteFruit(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFruit, id)
	return err
}

const getFruit = `-- name: GetFruit :one
SELECT id, name, created_at FROM fruits
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFruit(ctx context.Context, id int64) (Fruit, error) {
	row := q.db.QueryRow(ctx, getFruit, id)
	var i Fruit
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listFruits = `-- name: ListFruits :many
SELECT id, name, created_at FROM fruits
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListFruitsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFruits(ctx context.Context, arg ListFruitsParams) ([]Fruit, error) {
	rows, err := q.db.Query(ctx, listFruits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fruit{}
	for rows.Next() {
		var i Fruit
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFruit = `-- name: UpdateFruit :one
UPDATE fruits
  set name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateFruitParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateFruit(ctx context.Context, arg UpdateFruitParams) (Fruit, error) {
	row := q.db.QueryRow(ctx, updateFruit, arg.ID, arg.Name)
	var i Fruit
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
