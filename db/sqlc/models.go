// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type OrderStatus string

const (
	OrderStatusWaiting OrderStatus = "waiting"
	OrderStatusDone    OrderStatus = "done"
	OrderStatusFailure OrderStatus = "failure"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type TypeFruit string

const (
	TypeFruitBig   TypeFruit = "big"
	TypeFruitSmall TypeFruit = "small"
)

func (e *TypeFruit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeFruit(s)
	case string:
		*e = TypeFruit(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeFruit: %T", src)
	}
	return nil
}

type NullTypeFruit struct {
	TypeFruit TypeFruit `json:"type_fruit"`
	Valid     bool      `json:"valid"` // Valid is true if TypeFruit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeFruit) Scan(value interface{}) error {
	if value == nil {
		ns.TypeFruit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeFruit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeFruit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeFruit), nil
}

type Fruit struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

type Order struct {
	ID      int64       `json:"id"`
	UserID  int64       `json:"user_id"`
	FruitID int64       `json:"fruit_id"`
	Status  OrderStatus `json:"status"`
	Type    TypeFruit   `json:"type"`
	// can be negative or positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	ID                int64     `json:"id"`
	HashedPassword    string    `json:"hashed_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
}
