// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type OrderStatus string

const (
	OrderStatusWaiting OrderStatus = "waiting"
	OrderStatusDone    OrderStatus = "done"
	OrderStatusFailure OrderStatus = "failure"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Category struct {
	Value string `json:"value"`
	Name  string `json:"name"`
}

type Order struct {
	ID     int64       `json:"id"`
	UserID int64       `json:"user_id"`
	Status OrderStatus `json:"status"`
	// can be negative or positive
	Amount      int64     `json:"amount"`
	CreatedAt   time.Time `json:"created_at"`
	Address     string    `json:"address"`
	PhoneNumber string    `json:"phone_number"`
}

type OrderItem struct {
	ID         int64 `json:"id"`
	OrderID    int64 `json:"order_id"`
	ProductID  int64 `json:"product_id"`
	Quantity   int32 `json:"quantity"`
	TotalPrice int64 `json:"total_price"`
}

type Product struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Price     int64     `json:"price"`
	Images    []string  `json:"images"`
	Color     string    `json:"color"`
	Size      []string  `json:"size"`
	Category  string    `json:"category"`
	Features  []string  `json:"features"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	ID                int64     `json:"id"`
	HashedPassword    string    `json:"hashed_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
	IsEmailVerified   bool      `json:"is_email_verified"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	UserID     int64     `json:"user_id"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}
